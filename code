from functools import total_ordering, singledispatchmethod
from typing import Any
from re import search


@total_ordering
class RomanNumeral:
    """
       working with roman numerals.
       attribute Roman - dict roman numerals
       attribute num - roman numeral now
       staticmethod translator - algorithm
    """

    __slots__ = ('num',)
    
    Roman = {
            '': 0, 'I': 1, 'V': 5, 'X': 10, 
            'L': 50, 'C': 100, 'D': 500,
            'M': 1000
           }
    
    @singledispatchmethod
    def __init__(self, number: str) -> None:
        if not (isinstance(number, str) and self.is_roman(number)):
            raise ValueError('переданный объект не являеться римским/арабским числом')
        self.num = number
    
    @__init__.register
    def new__init__(self, number: int|float) -> None:
        if not number:
             raise ValueError('ноль не поддерживаеться в римской системе счисления')
        self.num = translator(self.Roman, number).num
    
    def __repr__(self) -> str:
        return f'{self.__class__.__name__}({repr(self.num)})'
    
    def __str__(self) -> str:
        return f'{self.num}'

    def __int__(self) -> int:
        """Converting Roman numbers to Arabic"""
        
        new_num = self.is_roman(self.num)
        wow = tuple(self.Roman[i] for i in new_num.group(2))
        count, measurement = 0, [1, -1][bool(new_num.group(1))]
        
        for i, j in enumerate(wow[:-1], 1):
            count += (j if j >= wow[i] else -j)
        return measurement * (count + wow[-1])
    
    def __hash__(self) -> int:
        return hash(int(self))
    
    def __gt__(self, total: object) -> bool:
        if isinstance(total, (self.__class__, float, int)): 
            return int(self) > int(total)
        return NotImplemented
    
    def __eq__(self, total: object) -> bool:
        if isinstance(total, (self.__class__, float, int)): 
            return int(self) == int(total)
        return NotImplemented
    
    def __getitem__(self, index: int) -> str:
        return self.num[index]
    
    def __abs__(self) -> object:
        return self.__class__(abs(int(self)))
    
    def __len__(self) -> int:
        return len(self.num)
    
    def is_roman(self, total: Any) -> object:
        return search(rf"^(-?)([{''.join(self.Roman)}]+)$", str(total))
    
    __add__ = operation('__add__')
    __sub__ = operation('__sub__')
    __mul__ = operation('__mul__')
    __truediv__ = operation('__truediv__')
    __mod__ = operation('__mod__')
    __floordiv__ = __truediv__
    
    __rmul__ = __mul__
    __radd__ = __add__
    __rsub__ = operation('__sub__', True)
    __rtruediv__ = operation('__truediv__', True)
    __rfloordiv__ = __rtruediv__
    __rmod__ = operation('__mod__', True)
